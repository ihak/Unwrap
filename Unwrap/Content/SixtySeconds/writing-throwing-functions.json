{
    "title": "Writing throwing functions",
    "postscript": "",
    "reviewType": "singleSelection",
    "question": "This code is valid Swift – true or false?",
    "hint": "Check that throwing functions are marked <code>throws<\/code>, and that their error case exists and conforms to <code>Error<\/code>.",
    "syntaxHighlighting": true,
    "correct": [
        "enum LoginError: Error {\n\tcase unknownUser\n}\nfunc authenticate(username: String) throws {\n\tif username == \"Anonymous\" {\n\t\tthrow LoginError.unknownUser\n\t}\n\tprint(\"Welcome, \\(username)!\")\n}",
        "enum PrintError: Error {\n\tcase invalidCount\n}\nfunc printPages(text: String, count: Int) throws {\n\tif count <= 0 {\n\t\tthrow PrintError.invalidCount\n\t} else {\n\t\tfor _ in 1...count {\n\t\t\tprint(\"Printing \\(text)...\")\n\t\t}\n\t}\n}",
        "enum PizzaErrors: Error {\n\tcase hasPineapple\n}\nfunc makePizza(type: String) throws {\n\tif type != \"Hawaiian\" {\n\t\tprint(\"Your pizza will be ready in 10 minutes.\")\n\t} else {\n\t\tthrow PizzaErrors.hasPineapple\n\t}\n}",
        "enum PlayError: Error {\n\tcase cheating\n\tcase noPlayers\n}\nfunc playGame(name: String, cheat: Bool = false) throws {\n\tif cheat {\n\t\tthrow PlayError.cheating\n\t} else {\n\t\tprint(\"Let's play a game of \\(name)...\")\n\t}\n}",
        "enum BookErrors: Error {\n\tcase tooFewPages\n\tcase tooManyPages\n}\nfunc writeBook(title: String, pages: Int) throws {\n\tswitch pages {\n\tcase 0...50:\n\t\tthrow BookErrors.tooFewPages\n\tcase 51...400:\n\t\tprint(\"Perfect! I'm going to write \\(title)...\")\n\tdefault:\n\t\tthrow BookErrors.tooManyPages\n\t}\n}",
        "enum CatProblems: Error {\n\tcase notACat\n\tcase unfriendly\n}\nfunc strokeCat(_ name: String) throws {\n\tif name == \"Mr Bitey\" {\n\t\tthrow CatProblems.unfriendly\n\t} else if name == \"Lassie\" {\n\t\tthrow CatProblems.notACat\n\t} else {\n\t\tprint(\"You stroked \\(name).\")\n\t}\n}"
    ],
    "wrong": [
        "enum AgeError: Error {\n\tcase underAge\n\tcase unknownAge\n}\nfunc buyAlcohol(age: Int) {\n\tif age >= 18 {\n\t\tprint(\"OK.\")\n\t} else {\n\t\tthrow AgeError.underAge\n\t}\n}",
        "enum ChargeError {\n\tcase noCable\n\tcase noPower\n}\nfunc chargePhone(atHome: Bool) throws {\n\tif atHome {\n\t\tprint(\"Phone is charging...\")\n\t} else {\n\t\tthrow ChargeError.noPower\n\t}\n}",
        "enum WifiError: Error {\n\tcase noNetwork\n\tcase noSignal\n}\nfunc connectToWifi(_ password: String) throws {\n\tif password == \"\" {\n\t\tthrow WifiError.badPassword\n\t}\n\tprint(\"You're connected.\")\n}",
        "enum MeasureError: Error {\n\tcase unknownItem\n}\nfunc measure(itemName: String) throws -> Double {\n\tswitch itemName {\n\tcase \"bookcase\":\n\t\treturn 2.0\n\tcase \"chair\":\n\t\treturn 1.0\n\tcase \"child\":\n\t\treturn 1.3\n\tcase \"adult\":\n\t\treturn 1.75\n\t}\n}",
        "enum BuildingError: Error {\n\tcase tooHigh\n\tcase tooLow\n}\nfunc constructBuilding(floors: Int) throws {\n\tif height < 10 {\n\t\tthrow BuildingError.tooLow\n\t} else if height > 500 {\n\t\tthrow BuildingError.tooHigh\n\t}\n\tprint(\"Perfect - let's get building!\")\n}",
        "enum ArrayError: Error {\n\tcase negateIndex\n}\nfunc readItem(_ index: Int, from array: [String]) -> String {\n\tif index < 0 {\n\t\tthrow ArrayError.negateIndex\n\t}\n\treturn array[index]\n}"
    ]
}
